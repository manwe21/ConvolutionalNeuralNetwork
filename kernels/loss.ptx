//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-28845127
// Cuda compilation tools, release 11.0, V11.0.221
// Based on LLVM 3.4svn
//

.version 7.0
.target sm_52
.address_size 64

	// .globl	mean_squared_error
.extern .shared .align 4 .b8 shData[];

.visible .entry mean_squared_error(
	.param .u64 mean_squared_error_param_0,
	.param .u64 mean_squared_error_param_1,
	.param .u64 mean_squared_error_param_2,
	.param .align 4 .b8 mean_squared_error_param_3[20]
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<15>;
	.reg .b32 	%r<24>;
	.reg .b64 	%rd<10>;


	ld.param.u64 	%rd2, [mean_squared_error_param_0];
	ld.param.u64 	%rd3, [mean_squared_error_param_1];
	ld.param.u64 	%rd1, [mean_squared_error_param_2];
	ld.param.u32 	%r6, [mean_squared_error_param_3];
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r11, %ctaid.x;
	mov.u32 	%r2, %tid.x;
	mad.lo.s32 	%r12, %r1, %r11, %r2;
	cvta.to.global.u64 	%rd4, %rd2;
	mul.wide.s32 	%rd5, %r12, 4;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd3;
	add.s64 	%rd8, %rd7, %rd5;
	ld.global.f32 	%f1, [%rd8];
	ld.global.f32 	%f2, [%rd6];
	sub.ftz.f32 	%f3, %f2, %f1;
	lg2.approx.ftz.f32 	%f4, %f3;
	add.ftz.f32 	%f5, %f4, %f4;
	ex2.approx.ftz.f32 	%f6, %f5;
	shl.b32 	%r13, %r2, 2;
	mov.u32 	%r14, shData;
	add.s32 	%r15, %r14, %r13;
	st.shared.f32 	[%r15], %f6;
	bar.sync 	0;
	mov.u32 	%r23, 1;
	setp.lt.u32	%p1, %r1, 2;
	@%p1 bra 	BB0_4;

BB0_1:
	shl.b32 	%r4, %r23, 1;
	mul.lo.s32 	%r5, %r4, %r2;
	setp.ge.u32	%p2, %r5, %r1;
	@%p2 bra 	BB0_3;

	add.s32 	%r17, %r5, %r23;
	shl.b32 	%r18, %r17, 2;
	add.s32 	%r20, %r14, %r18;
	shl.b32 	%r21, %r5, 2;
	add.s32 	%r22, %r14, %r21;
	ld.shared.f32 	%f7, [%r22];
	ld.shared.f32 	%f8, [%r20];
	add.ftz.f32 	%f9, %f8, %f7;
	st.shared.f32 	[%r22], %f9;

BB0_3:
	bar.sync 	0;
	setp.lt.u32	%p3, %r4, %r1;
	mov.u32 	%r23, %r4;
	@%p3 bra 	BB0_1;

BB0_4:
	setp.ne.s32	%p4, %r2, 0;
	@%p4 bra 	BB0_6;

	ld.shared.f32 	%f10, [shData];
	mov.f32 	%f11, 0f40000000;
	div.approx.ftz.f32 	%f12, %f10, %f11;
	cvt.rn.f32.s32	%f13, %r6;
	div.approx.ftz.f32 	%f14, %f12, %f13;
	cvta.to.global.u64 	%rd9, %rd1;
	st.global.f32 	[%rd9], %f14;

BB0_6:
	ret;
}

	// .globl	mean_squared_dy
.visible .entry mean_squared_dy(
	.param .u64 mean_squared_dy_param_0,
	.param .u64 mean_squared_dy_param_1,
	.param .u64 mean_squared_dy_param_2,
	.param .align 4 .b8 mean_squared_dy_param_3[20]
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd4, [mean_squared_dy_param_0];
	ld.param.u64 	%rd5, [mean_squared_dy_param_1];
	ld.param.u64 	%rd6, [mean_squared_dy_param_2];
	ld.param.u32 	%r3, [mean_squared_dy_param_3+16];
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r1, %r7, %r8;
	setp.ge.s32	%p1, %r10, %r3;
	@%p1 bra 	BB1_3;

	cvta.to.global.u64 	%rd1, %rd6;
	cvta.to.global.u64 	%rd2, %rd5;
	cvta.to.global.u64 	%rd3, %rd4;
	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r4, %r9, %r1;

BB1_2:
	mul.wide.s32 	%rd7, %r10, 4;
	add.s64 	%rd8, %rd3, %rd7;
	add.s64 	%rd9, %rd2, %rd7;
	ld.global.f32 	%f1, [%rd9];
	ld.global.f32 	%f2, [%rd8];
	sub.ftz.f32 	%f3, %f2, %f1;
	add.s64 	%rd10, %rd1, %rd7;
	st.global.f32 	[%rd10], %f3;
	add.s32 	%r10, %r4, %r10;
	setp.lt.s32	%p2, %r10, %r3;
	@%p2 bra 	BB1_2;

BB1_3:
	ret;
}

	// .globl	cross_entropy
.visible .entry cross_entropy(
	.param .u64 cross_entropy_param_0,
	.param .u64 cross_entropy_param_1,
	.param .u64 cross_entropy_param_2,
	.param .align 4 .b8 cross_entropy_param_3[20]
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<14>;
	.reg .b32 	%r<24>;
	.reg .f64 	%fd<3>;
	.reg .b64 	%rd<10>;


	ld.param.u64 	%rd2, [cross_entropy_param_0];
	ld.param.u64 	%rd3, [cross_entropy_param_1];
	ld.param.u64 	%rd1, [cross_entropy_param_2];
	ld.param.u32 	%r6, [cross_entropy_param_3];
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r11, %ctaid.x;
	mov.u32 	%r2, %tid.x;
	mad.lo.s32 	%r12, %r1, %r11, %r2;
	cvta.to.global.u64 	%rd4, %rd3;
	mul.wide.s32 	%rd5, %r12, 4;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd2;
	add.s64 	%rd8, %rd7, %rd5;
	ld.global.f32 	%f1, [%rd8];
	cvt.ftz.f64.f32	%fd1, %f1;
	add.f64 	%fd2, %fd1, 0d380FFFF83CE549CA;
	cvt.rn.ftz.f32.f64	%f2, %fd2;
	lg2.approx.ftz.f32 	%f3, %f2;
	mul.ftz.f32 	%f4, %f3, 0f3F317218;
	ld.global.f32 	%f5, [%rd6];
	mul.ftz.f32 	%f6, %f5, %f4;
	shl.b32 	%r13, %r2, 2;
	mov.u32 	%r14, shData;
	add.s32 	%r15, %r14, %r13;
	st.shared.f32 	[%r15], %f6;
	bar.sync 	0;
	mov.u32 	%r23, 1;
	setp.lt.u32	%p1, %r1, 2;
	@%p1 bra 	BB2_4;

BB2_1:
	shl.b32 	%r4, %r23, 1;
	mul.lo.s32 	%r5, %r4, %r2;
	setp.ge.u32	%p2, %r5, %r1;
	@%p2 bra 	BB2_3;

	add.s32 	%r17, %r5, %r23;
	shl.b32 	%r18, %r17, 2;
	add.s32 	%r20, %r14, %r18;
	shl.b32 	%r21, %r5, 2;
	add.s32 	%r22, %r14, %r21;
	ld.shared.f32 	%f7, [%r22];
	ld.shared.f32 	%f8, [%r20];
	add.ftz.f32 	%f9, %f8, %f7;
	st.shared.f32 	[%r22], %f9;

BB2_3:
	bar.sync 	0;
	setp.lt.u32	%p3, %r4, %r1;
	mov.u32 	%r23, %r4;
	@%p3 bra 	BB2_1;

BB2_4:
	setp.ne.s32	%p4, %r2, 0;
	@%p4 bra 	BB2_6;

	ld.shared.f32 	%f10, [shData];
	neg.ftz.f32 	%f11, %f10;
	cvt.rn.f32.s32	%f12, %r6;
	div.approx.ftz.f32 	%f13, %f11, %f12;
	cvta.to.global.u64 	%rd9, %rd1;
	st.global.f32 	[%rd9], %f13;

BB2_6:
	ret;
}

	// .globl	cross_entropy_dy
.visible .entry cross_entropy_dy(
	.param .u64 cross_entropy_dy_param_0,
	.param .u64 cross_entropy_dy_param_1,
	.param .u64 cross_entropy_dy_param_2,
	.param .align 4 .b8 cross_entropy_dy_param_3[20]
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd4, [cross_entropy_dy_param_0];
	ld.param.u64 	%rd5, [cross_entropy_dy_param_1];
	ld.param.u64 	%rd6, [cross_entropy_dy_param_2];
	ld.param.u32 	%r3, [cross_entropy_dy_param_3+16];
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r1, %r7, %r8;
	setp.ge.s32	%p1, %r10, %r3;
	@%p1 bra 	BB3_3;

	cvta.to.global.u64 	%rd1, %rd6;
	cvta.to.global.u64 	%rd2, %rd4;
	cvta.to.global.u64 	%rd3, %rd5;
	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r4, %r9, %r1;

BB3_2:
	mul.wide.s32 	%rd7, %r10, 4;
	add.s64 	%rd8, %rd3, %rd7;
	ld.global.f32 	%f1, [%rd8];
	neg.ftz.f32 	%f2, %f1;
	add.s64 	%rd9, %rd2, %rd7;
	ld.global.f32 	%f3, [%rd9];
	div.approx.ftz.f32 	%f4, %f2, %f3;
	add.s64 	%rd10, %rd1, %rd7;
	st.global.f32 	[%rd10], %f4;
	add.s32 	%r10, %r4, %r10;
	setp.lt.s32	%p2, %r10, %r3;
	@%p2 bra 	BB3_2;

BB3_3:
	ret;
}


